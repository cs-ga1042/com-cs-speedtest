/*
 * Created on 2022-06-09 ( Date ISO 2022-06-09 - Time 21:05:07 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
 */
package com.cs.speedtest.service;

import java.util.List;
import java.util.Optional;

import com.cs.speedtest.entities.TestServer;
import com.cs.speedtest.repository.TestServerRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Spring persistence service for "TestServer" <br>
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@Service
@Transactional
public class TestServerPersistenceService  {

	@Autowired
	private TestServerRepository testServerRepository;

	
	public TestServer findById(String guid) {

		Optional<TestServer> optionalEntity = testServerRepository.findById(guid);
		if ( optionalEntity.isPresent() ) {
			return optionalEntity.get();
		}
		return null ;

	}

	
	public List<TestServer> findAll() {
		//return testServerRepository.findAll());

		List<TestServer> entities = testServerRepository.findAll() ;
		List<TestServer> records = new java.util.LinkedList<TestServer>();
		for ( TestServer entity : entities ) {
			records.add( entity)  ;
		}
		return records ;

	}

	
	public long countAll() {
		return testServerRepository.count();
	}

	
	public TestServer save(TestServer record) {
//		return mapper.map(testServerRepository.save(mapper.map(record)));
		TestServer saved = testServerRepository.save( record) ;
		return saved;

	}

	
	public boolean update(TestServer record) {

		if ( exists(record) ) {
			testServerRepository.save(record);
			return true;
		}
		return false;
	}

	
	public TestServer create(TestServer record) {
		TestServer saved = testServerRepository.save( record) ;
		return saved;

	}

	
	public boolean deleteById(String guid) {
		final Optional<TestServer> optinalEntity = testServerRepository.findById(guid);
		if( ! optinalEntity.isPresent() ) {
			return false;
		}

		else {
			testServerRepository.delete(optinalEntity.get());
			return true;
		}
	}

	
	public boolean delete(TestServer record) {
		if(record == null) {
			return false;
		}
		return deleteById( record.getGuid() );

	}

	
	public boolean exists(String guid) {
		return testServerRepository.findById(guid).isPresent();
	}

	
	public boolean exists(TestServer record) {
		return record == null ? false : testServerRepository.findById(record.getGuid()).isPresent();
	}

}
